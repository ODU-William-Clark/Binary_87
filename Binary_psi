import numpy as np
from scipy.optimize import fsolve
from scipy.interpolate import interp1d

G = 4.30091e-6  # kpc * (km/s)^2 / M_sun

# --- Eccentricity distributions ---
#these e values are generated by inverse fransform sampling the given PDFs (y) in the paper. i.e thake the integral of the PDFs
# from zero to x then invert the equation by replacing y <-> x and solve for y.
def sample_eccentricity(model, size=1):
    u = np.random.uniform(size=size)
    if model == 'f1': return np.zeros(size)
    elif model == 'f2': return 1 - np.sqrt(1 - u)
    elif model == 'f3': return u
    elif model == 'f4': return np.sqrt(u)
    elif model == 'f5': return np.full(size, 0.9)
    else: raise ValueError("Invalid eccentricity model")

# --- Solve Kepler's equation ---
def solve_kepler(M, e):
    func = lambda E: E - e * np.sin(E) - M
    return fsolve(func, M)

# --- Build r sampler from given distribution ---
def build_r_sampler(r_vals, f_r):
    cdf = np.cumsum(f_r)
    cdf /= cdf[-1]
    return interp1d(cdf, r_vals, bounds_error=False, fill_value=(r_vals[0], r_vals[-1]))

# --- Sample psi values ---
def sample_psi(e_model, r, n_samples, mass=1):
    e = sample_eccentricity(e_model, size=n_samples)
    M = np.random.uniform(0, 2 * np.pi, size=n_samples)
    E = solve_kepler(M, e)
    term = 1 + e * np.cos(E)
    psi = np.sqrt(G / r * term)
    return psi
